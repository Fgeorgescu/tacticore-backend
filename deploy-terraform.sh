#!/bin/bash

# Script de despliegue con Terraform
# Este script compila el proyecto y lo despliega usando Terraform

set -e

echo "üöÄ Iniciando despliegue con Terraform..."

# Variables de configuraci√≥n
TERRAFORM_DIR="terraform/environments/dev"
REGION="us-east-1"
FUNCTION_NAME="tacticore-backend-function-dev"
BUCKET_NAME="tacticore-backend-deployment-bucket-dev"

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para imprimir mensajes con colores
print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

# Verificar que Terraform est√© instalado
if ! command -v terraform &> /dev/null; then
    print_error "Terraform no est√° instalado. Por favor inst√°lalo primero."
    print_warning "Puedes instalarlo con: brew install terraform"
    exit 1
fi

# Verificar que AWS CLI est√© instalado
if ! command -v aws &> /dev/null; then
    print_error "AWS CLI no est√° instalado. Por favor inst√°lalo primero."
    exit 1
fi

# Verificar que est√©s autenticado en AWS
if ! aws sts get-caller-identity &> /dev/null; then
    print_error "No est√°s autenticado en AWS. Ejecuta 'aws configure' primero."
    exit 1
fi

# Verificar que Maven est√© instalado
if ! command -v mvn &> /dev/null; then
    print_error "Maven no est√° instalado. Por favor inst√°lalo primero."
    exit 1
fi

print_step "Compilando el proyecto con Maven..."
mvn clean package -DskipTests

# Generar hash del c√≥digo fuente para detectar cambios
print_step "Generando hash del c√≥digo fuente..."
SOURCE_HASH=$(find src -name "*.java" -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
print_status "Hash del c√≥digo fuente: $SOURCE_HASH"

# Actualizar el archivo de configuraci√≥n de Terraform con el hash
print_step "Actualizando configuraci√≥n de Terraform..."
sed -i.bak "s/source_code_hash = \"dummy-hash\"/source_code_hash = \"$SOURCE_HASH\"/" "$TERRAFORM_DIR/variables.tf"

# Navegar al directorio de Terraform
cd "$TERRAFORM_DIR"

print_step "Inicializando Terraform..."
terraform init

print_step "Validando configuraci√≥n de Terraform..."
terraform validate

print_step "Planificando despliegue..."
terraform plan -out=tfplan

print_warning "¬øDeseas continuar con el despliegue? (y/N)"
read -r response
if [[ ! "$response" =~ ^[Yy]$ ]]; then
    print_warning "Despliegue cancelado por el usuario."
    exit 0
fi

print_step "Aplicando configuraci√≥n de Terraform..."
terraform apply tfplan

# Obtener outputs
print_step "Obteniendo informaci√≥n del despliegue..."
API_URL=$(terraform output -raw api_url)
FUNCTION_ARN=$(terraform output -raw function_arn)
BUCKET_NAME_OUTPUT=$(terraform output -raw s3_bucket_name)

print_status "‚úÖ Despliegue completado exitosamente!"
print_status "üåê URL de la API: $API_URL"
print_status "üîó ARN de la funci√≥n: $FUNCTION_ARN"
print_status "üì¶ Bucket S3: $BUCKET_NAME_OUTPUT"

# Subir el JAR al bucket S3
print_step "Subiendo JAR al bucket S3..."
JAR_FILE="../../target/tesis-lambda-1.0.0.jar"
S3_KEY="lambda-functions/tesis-lambda-$(date +%Y%m%d-%H%M%S).jar"

aws s3 cp "$JAR_FILE" "s3://$BUCKET_NAME_OUTPUT/$S3_KEY"

print_status "üìù Para probar la funci√≥n, ejecuta: curl $API_URL"

# Limpiar archivos temporales
rm -f tfplan
rm -f variables.tf.bak

echo ""
print_status "üìã Resumen del despliegue:"
echo "   - Funci√≥n Lambda: $FUNCTION_NAME"
echo "   - Regi√≥n: $REGION"
echo "   - Bucket S3: $BUCKET_NAME_OUTPUT"
echo "   - JAR File: $S3_KEY"
echo "   - API URL: $API_URL"
